#include "trojan.h"
#include <stdlib.h>
#include <stdio.h>
#include <iostream> 
#include <math.h>

using namespace std;

Trojan::Trojan(void) {
    m_tset = 0;
    CBitStream m_data_stream = CBitStream();
    CBitStream m_trans_stream = CBitStream();
}

Trojan::~Trojan(void) {
    
}

void Trojan::GenStream(int n) {
    for(int i = 0; i < n; i++) {
        WORD value;
        //WORD value = {'1','0','0'};
        for(int j = 0; j < WORDLEN; j++) {
            int randbit = rand()%2 + '0';
            value.x[j] = randbit;
        }
        m_data_stream.WriteWord(value);
    }
#ifdef DEBUG 
    printf("Target Stream generated by Trojan as follows: ");
    m_data_stream.PrintStream();
    cout << endl;
#endif
}

WORD Trojan::GetData() {

    m_curr_data = m_data_stream.ReadNextWord();
    
    #ifdef DEBUG 
        //printf("Trojan Get Data: read curr data\n");
    #endif
    
    if(m_curr_data.x[0] != 'e'){
        
        #ifdef DEBUG 
            //printf("Trojan Get Data: NOT NULL \n");
        #endif
        
        m_curr_size_idx = 0;
        for(int i = 0; i < WORDLEN; i++){
            //cout << "*m_curr_data[" << i << "] = " << (m_curr_data[i] - '0') << endl;            
            m_curr_size_idx += (m_curr_data.x[i] - '0')*pow(2,WORDLEN-i-1);
        }
        
        #ifdef DEBUG 
            printf("Trojan: Sending data = ");
            for(int i = 0; i < WORDLEN; i++) {
                cout << m_curr_data.x[i];
            }
        #endif
        
        printf("\nm_curr_size_idx = %d\n", m_curr_size_idx);
    }
    
    return m_curr_data;
}

void Trojan::SetTargetSet(long set) {
    m_tset = set;
}

void Trojan::AccessSet() {
    int size = sizes[m_curr_size_idx];
    AccessSetWithSize(m_tset, size);
}

void Trojan::TransmissionAck() {
    m_trans_stream.WriteWord(m_curr_data);
}
